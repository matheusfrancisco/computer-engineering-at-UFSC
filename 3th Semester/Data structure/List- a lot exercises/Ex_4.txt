/*4. (PF) { Defina e implemente operações Insere, Remove e Busca usando uma lista duplamente encadeada circular com cabeca.*/
#include<stdio.h>
#include<stdlib.h>

struct celula{
    int conteudo;
    struct celula*ant;
    struct celula*seg;
}; typedef struct celula cel;

void Insere(int x, cel**lst);
void Remove(cel**lst);
cel*Busca(int x, cel**lst);

int main(){
    cel*lst;
    lst = (cel*)malloc(sizeof(cel*));
    lst->seg = lst;
    lst->ant = lst;

    Insere(4, &lst);
	Insere(7, &lst);
	Insere(9, &lst);
	Insere(2, &lst);

	Remove(&lst);

	printf("%i", Busca(2, &lst));

	return 0;
}

void Insere(int x, cel**lst){
    cel*p;
    cel*nova;

    nova = (cel*)malloc(sizeof(cel*));
    nova->seg = (*lst);
    nova->ant = (*lst);
    nova->conteudo = x;

    if((*lst)->seg == (*lst)){
        (*lst)->seg = nova;
        (*lst)->ant = nova;
    }else{
        p = (*lst)->ant;
        (*lst)->ant = nova;
        p->seg = nova;
        nova->ant = p;
    }
}

void Remove(cel**lst){
    cel*p;
    cel*q;

    if((*lst)->seg == (*lst)){
        printf("LISTA VAZIA");
    }else{
        p = (*lst)->seg;
        q = p->seg;
        (*lst)->seg = q;
        q->ant = (*lst);
        free(p);
    }
}

cel*Busca(int x, cel**lst){
    cel*p;
    cel*q;

    if((*lst)->seg == (*lst)){
        printf("LISTA VAZIA");
    }else{
        p = (*lst)->seg;
        while(p->seg != (*lst) && p->conteudo != x){
            p = p->seg;
        }
    }
    if(p->conteudo == x){
        return p;
    }else{
        printf("NAO EXISTE CORRESPONDENCIA");
        p = NULL;
        return p;
    }
}
